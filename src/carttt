import { Col, Row, Container, Card, Button } from 'react-bootstrap';
import { useEffect, useState } from 'react';
import axios from 'axios';


function Cart() {
    const [cartItems, setCartItems] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    
    // Fetch cart items when the component mounts
    useEffect(() => {
        const fetchCartItems = async () => {
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user || !user.user_id) {
                console.error('User not found or user ID is missing');
                return;
            }

            try {
                const response = await axios.get(`http://localhost:8000/api/cart/?user=${user.user_id}`);
                const cartData = response.data;

                // Fetch product details for each cart item
                const detailedCartItems = await Promise.all(cartData.map(async (item) => {
                    const productResponse = await axios.get(`http://localhost:8000/api/products/${item.product}/`);
                    return {
                        ...item,
                        product: productResponse.data
                    };
                }));

                setCartItems(detailedCartItems);
            } catch (err) {
                setError('Failed to load cart items');
                console.error(err);
            } finally {
                setLoading(false);
            }
        };

        fetchCartItems();
    }, []);

    // Handle updating cart item quantity
    const handleUpdateQuantity = async (item, newQuantity) => {
        try {
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user || !user.user_id) {
                console.error('User not found or user ID is missing');
                return;
            }

            const response = await axios.put(`http://localhost:8000/api/cart/${item.id}/`, {
                user: user.user_id,
                product: item.product.id,
                quantity: newQuantity
            });
            setCartItems(cartItems.map(cartItem => cartItem.id === item.id ? { ...cartItem, quantity: newQuantity } : cartItem));
        } catch (err) {
            console.error('Error updating quantity:', err);
        }
    };

    // Handle removing a cart item
    const handleRemoveItem = async (itemId) => {
        console.log(itemId);
        
        try {
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user || !user.user_id) {
                console.error('User not found or user ID is missing');
                return;
            }

            await axios.delete(`http://localhost:8000/api/cart/${itemId}/`);
            setCartItems(cartItems.filter(item => item.id !== itemId));
        } catch (err) {
            console.error('Error removing item:', err);
        }
    };

    if (loading) {
        return <p>Loading cart items...</p>;
    }

    if (error) {
        return <p>{error}</p>;
    }

    return (
        <Container className="p-3">
            <h3>Your Cart</h3>
            {cartItems.length === 0 ? (
                <p>Your cart is empty.</p>
            ) : (
                <Row>
                    {cartItems.map((item) => (
                        <Col md={6} lg={4} key={item.id}>
                            <Card className="mb-3">
                                <Card.Body>
                                    <Row>
                                        <Col md={4}>
                                            <Card.Img variant="top" src={item.product.image} />
                                        </Col>
                                        <Col md={8}>
                                            <Card.Title>{item.product.name}</Card.Title>
                                            <p>Price: ₹ {item.product.price}</p>
                                            <p>Subtotal: ₹ {item.product.price * item.quantity}</p>
                                            <div>
                                                <Button 
                                                    variant="secondary" 
                                                    onClick={() => handleUpdateQuantity(item, item.quantity - 1)} 
                                                    disabled={item.quantity <= 1}
                                                >
                                                    -
                                                </Button>
                                                <span className="mx-3">{item.quantity}</span>
                                                <Button 
                                                    variant="secondary" 
                                                    onClick={() => handleUpdateQuantity(item, item.quantity + 1)}
                                                >
                                                    +
                                                </Button>
                                            </div>
                                            <Button 
                                                variant="danger" 
                                                className="mt-3" 
                                                onClick={() => handleRemoveItem(item.id)}
                                            >
                                                Remove
                                            </Button>
                                        </Col>
                                    </Row>
                                </Card.Body>
                            </Card>
                        </Col>
                    ))}
                </Row>
            )}

            <Row className="mt-4">
                <Col className="text-end">
                    <Button variant="success" size="lg">
                        Proceed to Checkout
                    </Button>
                </Col>
            </Row>
        </Container>
    );
}

export default Cart;








const handleAddToCart = async (product) => {
    try {
        const quantity = 1;
        const user = JSON.parse(localStorage.getItem('user'));

        if (!user || !user.user_id) {
            console.error('User not found or user ID is missing');
            return;
        }

        const userId = user.user_id;

        // 1. Check if cartId is already in localStorage
        let cartId = localStorage.getItem(`cartId_${userId}`);

        // 2. If not in localStorage, fetch it from backend
        if (!cartId) {
            const cartResponse = await axios.get(`http://localhost:8000/api/cart/?user=${userId}`);
            const cartItems = cartResponse.data;

            // Assuming the first item's `cart` field holds the cart ID
            if (cartItems.length > 0 && cartItems[0].cart) {
                cartId = cartItems[0].cart;
                localStorage.setItem(`cartId_${userId}`, cartId);  // Save to localStorage
            }
        }

        // 3. Fetch current cart items (you may have already done this above)
        const cartResponse = await axios.get(`http://localhost:8000/api/cart/?user=${userId}`);
        const cartItems = cartResponse.data;

        const existingCartItem = cartItems.find(item => item.product === product.id);

        if (existingCartItem) {
            const updatedQuantity = existingCartItem.quantity + 1;

            await axios.put(`http://localhost:8000/api/cart/${existingCartItem.id}/`, {
                user: userId,
                cart: cartId,
                product: product.id,
                quantity: updatedQuantity
            });
        } else {
            await axios.post('http://localhost:8000/api/cart/', {
                user: userId,
                cart: cartId,
                product: product.id,
                quantity
            });
        }

        // 4. Sync localStorage cart
        const localCartKey = `cartItems${userId}`;
        let localCart = JSON.parse(localStorage.getItem(localCartKey)) || [];

        const existingIndex = localCart.findIndex(item => item.id === product.id);

        if (existingIndex !== -1) {
            localCart[existingIndex].quantity += 1;
        } else {
            localCart.push({ ...product, quantity: 1 });
        }

        localStorage.setItem(localCartKey, JSON.stringify(localCart));

        console.log('Product added to cart successfully');

    } catch (error) {
        console.error('Error adding/updating item in cart:', error);
    }
};